<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <style>
    .timestamp {
      color: blue;
      cursor: pointer;
    }
    .flex {
      display: flex;
      column-gap: 10px;
    }
    .video {
      /* width: 500px; */
      width: 100%;
    }
    #page-local-coursedetail header#page-header {
      display: none;
    }
    #page-local-coursedetail
      #page-content.blocks-pre
      .region-main
      #region-main {
      padding: 0 !important;
    }
    .video {
      /* width: 500px; */
      width: 100%;
      border-radius: 10px;
    }
    .comment-area {
      width: 31%;
    }

    .input-val {
      background: rgb(252, 252, 252);
      box-shadow: 0 1rem 4rem var(--color-light);
      border-radius: 12px;
      padding: 13px;
    }
    .input {
      padding: 10px;
      margin: 10px;
      display: flex;
      border-radius: 5px !important;
      flex-direction: column;
      row-gap: 10px;
    }
    .commient-box {
      display: flex;
      column-gap: 10px;
      justify-content: end;
    }
    .commient-box button {
      background: transparent;
      padding: 10px;
    }
    .commient-box button {
      background: #fafafa;
      padding: 10px;
      box-shadow: rgba(0, 0, 0, 0.04) 0px 3px 5px;
      border-radius: 10px;
    }
    .comment-area textarea {
      width: 100%;
      overflow: auto;
      font-size: 13px;
      padding: 15px;
    }
    .user-comment-data {
      background: #f1f1f18a;
      padding: 18px;
      margin: 18px;
      border-radius: 18px;
      box-shadow: rgba(0, 0, 0, 0.04) 0px 3px 5px;
    }
    .input {
      padding: 24px;
      margin: 10px;
      display: flex;
      border-radius: 5px !important;
      flex-direction: column;
      row-gap: 10px;
      /* box-shadow: none; */
      border: 1px solid #f6f6f6;
    }
    .time-ago {
      display: flex;
      /* align-items: flex-end; */
      /* background: red; */
      /* text-align: -webkit-auto; */
      justify-content: end;
      font-size: 11px;
    }
    .comment {
      height: 332px;
      overflow: auto;
    }

    .comment::-webkit-scrollbar {
      width: 8px;
    }

    /* Track */
    .comment::-webkit-scrollbar-track {
      background: #f1f1f1;
    }

    /* Handle */
    .comment::-webkit-scrollbar-thumb {
      background: #6136ff;
      border-radius: 10px;
    }

    /* Handle on hover */
    .comment::-webkit-scrollbar-thumb:hover {
      background: #555;
    }
    .custome-body-video {
      column-gap: 40px;
    }
    .timestamp {
    color: #2196F3;
    cursor: pointer;
    font-size: 11px;
}
.comment-time {
    background: white;
    padding: 5px 11px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    column-gap: 10px;
    box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
}
    .blur {
      background-color: rgb(0 0 0 / 70%);
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;

      z-index: 9999;
      img {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 60px;
        cursor: pointer;
      }
    }
    .video-playing {
      position: relative;

      width: 100%;
    }
    .blur {
      background-color: rgb(0 0 0 / 70%);
      position: absolute;
      border-radius: 10px;
      left: 0;
      right: 0;
      top: 0;
      bottom: 6px;
      z-index: 9999;
    }
    .custome-comment-msg {
    display: flex;
    justify-content: right;
    align-items: center;
    column-gap: 16px;
}
.user-name-on-video{
  position: absolute;
  right: 10px;
  top: 10px;
}
  </style>
  <body>

    <div class="flex custome-body-video flex-column flex-md-row  gap-2">
    <h1></h1>
    
      <div class="card w-100 p-4">
        <div
          id="userdata-and-video"
          data-userid="{{ userId }}"
          data-videoPath="{{ id }}"
          class="flex"
        >
          <div class="video-playing">
            <p class="user-name-on-video">{{username}}</p>
            <div class="blur">
              <img
                src="https://cdn.iconscout.com/icon/premium/png-256-thumb/play-1889117-1597218.png?f=webp&w=128"
                alt=""
              />
            </div>
            <video
              class="video"
              controls
              controlsList="nodownload"
              src="{{config.wwwroot}}{{ id }}"
            ></video>
          </div>
        </div>
        <div class="text-area">
          <h2 class="py-3">{{title}}</h2>
          <h3 class="py-1">Course Description</h3>
          <p>
          {{description}}
          </p>
        </div>
      </div>
      <div class="card w-100 comment-area">
        <div class="input">
          <h3>Add comment on timestamp :</h3>
          <textarea
            class="input-val"
            name=""
            id=""
            cols="30"
            rows="3"
            placeholder="Add a comment..."
          ></textarea>
          <!-- <input type="text" class="input-val"  /> -->
          <div class="commient-box">
            <button class="cancel">Cancel</button>
            <button class="add">Comment</button>
          </div>
        </div>
        <div class="comment"></div>
      </div>
    </div>

    <script>

    console.log('j')
    console.log()
      const commentmsg = [];
      const comment = document.querySelector(".comment");
      const inputval = document.querySelector(".input-val");
      const video = document.querySelector(".video");
      const input = document.querySelector(".input");
      const add = document.querySelector(".add");
      const cancel = document.querySelector(".cancel");
      const userdataandvideo = document.querySelector("#userdata-and-video");
      const newVideoPath = userdataandvideo.dataset.videopath;
      cancel.addEventListener("click", () => {
        inputval.value = "";
      });
      function timeAgo(dateString) {
  const now = new Date();
  const date = new Date(dateString);

  const seconds = Math.floor((now - date) / 1000);

  const interval = Math.floor(seconds / 31536000);

  if (interval > 1) {
    return `${interval} years ago`;
  }
  if (interval === 1) {
    return `${interval} year ago`;
  }


  const months = Math.floor(seconds / 2592000);
  if (months > 1) {
    return `${months} months ago`;
  }
  if (months === 1) {
    return `${months} month ago`;
  }


  const days = Math.floor(seconds / 86400);
  if (days > 1) {
    return `${days} days ago`;
  }
  if (days === 1) {
    return `${days} day ago`;
  }


  const hours = Math.floor(seconds / 3600);
  if (hours > 1) {
    return `${hours} hours ago`;
  }
  if (hours === 1) {
    return `${hours} hour ago`;
  }


  const minutes = Math.floor(seconds / 60);
  if (minutes > 1) {
    return `${minutes} minutes ago`;
  }
  if (minutes === 1) {
    return `${minutes} minute ago`;
  }

 
  if (seconds > 1) {
    return `${seconds} seconds ago`;
  }

  return 'Just now';
}
function convertSecondsToTime(seconds) {

const minutes = Math.floor(seconds / 60);
const hours = Math.floor(minutes / 60);


const remainingSeconds = seconds % 60;
const val = `${hours}h : ${minutes % 60}m :${remainingSeconds.toFixed(0)}s `
return val
}

const printcomment = (commentdata)=>{
    const newarr = commentdata
   console.log( newarr.reverse())
    const uionscreeen = commentdata
          .map((e) => {
            return `<div class="user-comment-data"> <span><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12 4C13.0609 4 14.0783 4.42143 14.8284 5.17157C15.5786 5.92172 16 6.93913 16 8C16 9.06087 15.5786 10.0783 14.8284 10.8284C14.0783 11.5786 13.0609 12 12 12C10.9391 12 9.92172 11.5786 9.17157 10.8284C8.42143 10.0783 8 9.06087 8 8C8 6.93913 8.42143 5.92172 9.17157 5.17157C9.92172 4.42143 10.9391 4 12 4ZM12 14C16.42 14 20 15.79 20 18V20H4V18C4 15.79 7.58 14 12 14Z" fill="#699BF7"/>
</svg>
</span><span> ${e.commentText}</span>
              <div class='custome-comment-msg'>
                <div class='comment-time'><svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_130_12266)">
<path d="M19.2502 9.74756C19.1734 9.748 19.0973 9.73329 19.0262 9.70426C18.9551 9.67523 18.8905 9.63246 18.836 9.57839L11.4918 2.22839C11.3963 2.1168 11.3463 1.97325 11.352 1.82644C11.3577 1.67963 11.4185 1.54037 11.5224 1.43648C11.6263 1.33259 11.7656 1.27173 11.9124 1.26606C12.0592 1.26039 12.2027 1.31033 12.3143 1.40589L19.6643 8.75006C19.7466 8.83165 19.8027 8.93589 19.8255 9.04949C19.8483 9.1631 19.8367 9.28091 19.7923 9.38792C19.7479 9.49493 19.6726 9.58628 19.576 9.65034C19.4795 9.71439 19.366 9.74823 19.2502 9.74756Z" fill="#0FA958"/>
<path d="M11.9232 4.42773L7.9624 8.38857C6.90801 8.13435 5.80623 8.15306 4.76108 8.44292C3.71593 8.73279 2.7619 9.28425 1.98907 10.0452C1.93439 10.0995 1.891 10.164 1.86138 10.2351C1.83177 10.3061 1.81652 10.3824 1.81652 10.4594C1.81652 10.5364 1.83177 10.6127 1.86138 10.6837C1.891 10.7548 1.93439 10.8193 1.98907 10.8736L5.67574 14.5836L1.33574 18.9061C1.27467 18.9584 1.22508 19.0227 1.19006 19.0951C1.15505 19.1675 1.13537 19.2463 1.13227 19.3266C1.12917 19.407 1.1427 19.4871 1.17203 19.5619C1.20136 19.6368 1.24584 19.7048 1.30269 19.7616C1.35954 19.8185 1.42753 19.8629 1.50238 19.8923C1.57724 19.9216 1.65735 19.9351 1.73768 19.932C1.81802 19.9289 1.89685 19.9093 1.96922 19.8742C2.04159 19.8392 2.10594 19.7896 2.15824 19.7286L6.49824 15.3886L10.1907 19.0811C10.2452 19.1351 10.3099 19.1779 10.381 19.2069C10.452 19.236 10.5281 19.2507 10.6049 19.2502C10.6821 19.2499 10.7584 19.2343 10.8295 19.2042C10.9006 19.1742 10.965 19.1304 11.0191 19.0752C11.7773 18.3006 12.3269 17.3464 12.6166 16.3019C12.9063 15.2573 12.9266 14.1564 12.6757 13.1019L16.6366 9.14107L11.9232 4.42773Z" fill="#0FA958"/>
</g>
<defs>
<clipPath id="clip0_130_12266">
<rect width="21" height="21" fill="white"/>
</clipPath>
</defs>
</svg>
<span class='timestamp' data-timestamp="${e.commentstamp}" >${convertSecondsToTime(e.commentstamp)} </span></div>
                <div class="time-ago">${timeAgo(new Date(e.commenttime))}</div>
              </div>
                </div>`;
          })
          .join(" ");

        comment.innerHTML = uionscreeen;
        const timestamp = document.querySelectorAll(".timestamp");
        timestamp.forEach((element) => {
          console.log(element);
          element.addEventListener("click", (e) => {
           
            video.currentTime = Number(e.target.dataset.timestamp);
          });
        });
}

      let videoDurition;
      let videoId;
      let timeout;
      let totalTime = 0;
   
      let duration;
      video.addEventListener("loadedmetadata", function () {
        duration = video.duration.toFixed(2);
        console.log(video.duration.toFixed(2));
      });

      const fetchApi = async () => {
        const url =
          "{{config.wwwroot}}/local/datainsert.php";
        const data = {
          videopath: newVideoPath,
          userid: userdataandvideo.dataset.userid,
        };

        // Making a POST request
        const fetchData = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        // Getting the response
        const response = await fetchData.json();
        if(response?.data?.length > 0){

          printcomment(response?.data)
        }
        console.log(response);
        videoDurition = response.durationwatchinseconds;
        
          videoId = response.videoId;
        
      };
      const postcomment = async () => {
        const url =
          "{{config.wwwroot}}/local/addcomment.php";
        const data = {
          videoId:Number(videoId),
          comment: inputval.value,
          timeStamp : video.currentTime,
          commentTime:new Date()
        };

        // Making a POST request
        const fetchData = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        // Getting the response
        const response = await fetchData.json();
        printcomment(response.data)
        console.log(response.data);
        
      };
      const timeupdate = async (time) => {
        console.log("time");

        let newtimeupdate = time >= duration ? Number(duration) : time;
        if (newtimeupdate > videoDurition) {
          const url =
            "{{config.wwwroot}}/local/videotimeupdate.php";
          const data = { timeStamp: newtimeupdate, videoId: videoId };

          // Making a POST request
          const fetchData = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          // Getting the response
          const response = await fetchData.json();
          videoDurition = response.durationwatchinseconds;
          console.log(response);
        }
      };

      //
      fetchApi();
// Function to calculate time ago

// Usage
// Function to calculate time ago

   
   

     


add.addEventListener("click", () => {
  postcomment()

  // arr.forEach(entry => {
  //   console.log(`${entry.comment} - ${timeAgo(entry.time)}`);
  // });
console.log('object')
  // Additional code if needed
  inputval.value = "";
});


      video.addEventListener("pause", () => {
        clearInterval(timeout);
console.log('d')
        timeupdate(totalTime);
      });

     

      video.addEventListener("pause", () => {
        clearInterval(timeout);
console.log('d')
        timeupdate(totalTime);
      });
      video.addEventListener("play", (e) => {
        console.log("play");
        timeout = setInterval(() => {
          totalTime++;
        }, 1000);
      });
      video.addEventListener('waiting', ()=>{
       console.log('loading ....')
       clearInterval(timeout);
       });
      var prevTime = 0;
      video.addEventListener("seeking", function () {
        var currentTime = video.currentTime;

        if (currentTime > prevTime) {
        } else if (currentTime < prevTime) {
          if (video.currentTime < videoDurition)
            totalTime = video.currentTime.toFixed(0);
        }

        prevTime = currentTime;
      });
      const blurr = document.querySelector(".blur");
      const img = blurr.querySelector("img");
      img.addEventListener("click", () => {
        video.play();
        blurr.style.display = "none";
      });
      video.addEventListener("pause", () => {
        blurr.style.display = "block";
      });
      video.addEventListener("play", () => {
        blurr.style.display = "none";
      });
      video.addEventListener("seeking", () => {
        console.log("object");
        blurr.style.display = "none";
      });
    </script>
  </body>
</html>
