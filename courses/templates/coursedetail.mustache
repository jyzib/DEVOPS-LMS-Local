<!-- <body>
   
<h1>{{name}}</h1>
{{#data}}
<h3>{{coursename}}</h3>
<img width="100px" src='{{courseimage}}' alt="">
<a href="https://www.google.com"><button>Purchase Now</button></a>
{{/data}}
</body> -->
<!-- <!DOCTYPE html>
<html lang="en"> -->
<!-- <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Razorpay Payment Form</title>
</head> -->
<!-- <body> -->
    <!-- {{#data}}
<h3>{{coursename}}</h3>
<h3>{{courseid}}</h3>
<img width="100px" src='{{courseimage}}' alt="">
<button onclick="goToCheckout('{{userid}}', '{{courseid}}')">Go to Checkout</button>

<script>
    function goToCheckout(userid, courseid) {
            var encodedUserID = encodeURIComponent(userid);
            var encodedCourseID = encodeURIComponent(courseid);
            var checkoutURL = 'payment/checkout.php?userid=' + encodedUserID + '&courseid=' + encodedCourseID;
            window.location.href = checkoutURL;
        }
</script>
{{/data}} -->
<!-- </body>
</html>  -->

<style>
span.userbutton {
    display: flex;
    align-items: center;
    flex-direction: row-reverse;
}
    #page-local-courses-course_list #page-header{
    display: none;
    }
    section#region-main {
    padding: 0 !important;
}
.course-area-details {
   
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    gap: 20px;
    padding: 20px;
}

.course-card{
    border: 2px solid #d6d6d6;
    border-radius: 10px;
    background-color: white;
}
.course-img img{
    width: 100%;
    height: 170px;
    border-radius: 10px;
    object-fit: cover;
    
}
.course-img {
    padding: 8px;
}
.course-tittle {
    padding: 9px;
}
.course-tittle h3{
    color: black;
    font-size: 15px;
    font-weight: 500;
}
.course-tittle p{
    font-size: 11px;
    color: black;
}

.addtpcart{
    grid-column-gap: 12px;
    grid-row-gap: 12px;
    color: white;
    margin-top: 10px;
    background-color: #6136ff;
    border-radius: 6px;
    justify-content: center;
    align-items: center;
    padding: 10px 20px;
    font-weight: 500;
    text-decoration: none;
    display: flex;
    width: 100%;
}
</style>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course</title>
</head>
<script src="https://cdn.tailwindcss.com"></script>
<script>
    tailwind.config = {
        darkMode: 'class',
        theme: {
            extend: {
                fontFamily: {
                    inter: ['Inter', 'sans-serif'],
                },
            },
        },
    };
    </script>
<body>
    <div class="course_details">

        <div class="course_header">
            <main class="relative rounded-2xl flex flex-col justify-center bg-slate-900 overflow-hidden">
                <div class="w-full max-w-6xl mx-auto px-2 md:px-2 py-14">
            
                    <div class="text-center">
        
                        <!-- Illustration #1 -->
                        <div class="absolute top-0 left-0 rotate-180 -translate-x-3/4 -scale-x-100 blur-3xl opacity-70 pointer-events-none" aria-hidden="true">
                            <img src="https://cruip-tutorials.vercel.app/particle-animation/shape.svg" class="max-w-none" width="852" height="582" alt="Illustration" />
                        </div>
                        
                        <!-- Illustration #2 -->
                        <div class="absolute top-0 right-0 -translate-y-1/2 translate-x-1/4 blur-3xl opacity-70 pointer-events-none" aria-hidden="true">
                            <img src="https://cruip-tutorials.vercel.app/particle-animation/shape.svg" class="max-w-none" width="852" height="582" alt="Illustration" />
                        </div>
        
                        <!-- Particles animation -->
                        <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
                            <canvas data-particle-animation></canvas>
                        </div>
                    
                        <div class="relative">
                            <h1 class="inline-flex font-extrabold text-5xl md:text-6xl bg-clip-text text-transparent bg-gradient-to-r from-slate-200/60 via-slate-200 to-slate-200/60 pb-4">Subscribe to the best of Devops</h1>
                            <!-- <div class="max-w-3xl mx-auto mb-8">
                                <p class="text-lg text-slate-400">Our landing page template works on all devices, so you only have to set it up once, and get beautiful results forever.</p>
                            </div> -->
                            <div class="inline-flex justify-center space-x-4">
                                <!-- <div>
                                    <a class="inline-flex justify-center whitespace-nowrap rounded-lg bg-indigo-500 px-3.5 py-2.5 text-sm font-medium text-white shadow-sm shadow-indigo-950/10 hover:bg-indigo-600 focus-visible:outline-none focus-visible:ring focus-visible:ring-indigo-300 dark:focus-visible:ring-slate-600 transition-colors duration-150 group" href="#0">
                                        Get Started <span class="tracking-normal text-indigo-300 group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">-&gt;</span>
                                    </a>
                                </div> -->
                                <div>
                                  
                                </div>
                            </div>
                        </div>
                    </div>
            
                </div>
            </main>
        </div>
        <div class="course-area-details">
   
        </div>
    </div>
</body>
<script>
const course_area_details = document.querySelector('.course-area-details')

const getcourse = async () => {
    const response = await fetch('{{config.wwwroot}}/local/courses/getcourses.php');
    const data = await response.json();

    const datamap = data.map((ele) => {
        const { courseimage, courseid, coursename, userid, price, isAdded } = ele;
        return (
            `<div class="course-card">
                <div class="course-img">

                    <a href="https://yislms.com/devops/yatharthriti/local/courses/coursedetails.php?courseid=${courseid}">
                    <img src="${courseimage}" alt="">
                </a>
                </div>
                <div class="course-tittle">
                    <h3>${coursename}</h3>
                    <h3>${price}</h3>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente, molestiae?</p>
                    ${isAdded ? (
                        `<button class="addtpcart"><a href="{{config.wwwroot}}/local/courses/cart.php">Go to cart</a></button>`
                    ) : (
                        `<button onclick="handelcartapi('${courseid}','${userid}','${price}')" class="addtpcart">Add to cart</button>`
                    )}
                </div>
            </div>`
        );
    }).join('');




course_area_details.innerHTML = datamap
    console.log(data)
}

    const cart_count1 = document.querySelector('.cart-count')
        const cart_item1 = document.querySelector('.cart-item')
const getcartitemm =async ()=>{
const responce = await fetch('{{config.wwwroot}}/local/courses/getCartItem.php')
const data =await responce.json()
console.log(data)

cart_count1.innerText = data.length
const cartdata = data.map((e)=>{
    return (`<li><div class="dropdown-img"><img src="${e.img}" alt=""></div>
                                <div class="text-dropdown"><h2>${e.coursename}</h2>
                                    <p>â‚¹${e.amount}</p>
                                    
                                    </div>
                            </li>`)
}).join('')
  
cart_item1.innerHTML = cartdata
}





const callapiforcart =async (e)=>{

const apiUrl = '{{config.wwwroot}}/local/courses/postCartItem.php';

const postData = {
    amount: Number(e[2]),
    userid : Number(e[1]),
    courseid:Number(e[0])
};



const requestOptions = {
  method: 'POST', 
  headers: {
    'Content-Type': 'application/json' 
    
  },
  body: JSON.stringify(postData) 
};

// Make the POST request
fetch(apiUrl, requestOptions)
  .then(response => {
    // Check if the request was successful (status code 2xx)
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    
    // Parse the response
    return response.json();
  })
  .then(data => {
    // Handle the data returned from the server
    getcartitemm()
    getcourse()

    console.log('Response data:', data);
  })
  .catch(error => {
    // Handle any errors that occurred during the fetch
    console.error('Fetch error:', error);
  });

}












const handelcartapi = (...e)=>{
    callapiforcart(e)
}
getcourse()













    // Particle animation
class ParticleAnimation {
constructor(el, { quantity = 30, staticity = 50, ease = 50 } = {}) {
this.canvas = el;
if (!this.canvas) return;
this.canvasContainer = this.canvas.parentElement;
this.context = this.canvas.getContext('2d');
this.dpr = window.devicePixelRatio || 1;
this.settings = {
  quantity: quantity,
  staticity: staticity,
  ease: ease,
};
this.circles = [];
this.mouse = {
  x: 0,
  y: 0,
};
this.canvasSize = {
  w: 0,
  h: 0,
};
this.onMouseMove = this.onMouseMove.bind(this);
this.initCanvas = this.initCanvas.bind(this);
this.resizeCanvas = this.resizeCanvas.bind(this);
this.drawCircle = this.drawCircle.bind(this);
this.drawParticles = this.drawParticles.bind(this);
this.remapValue = this.remapValue.bind(this);
this.animate = this.animate.bind(this);
this.init();
}

init() {
this.initCanvas();
this.animate();
window.addEventListener('resize', this.initCanvas);
window.addEventListener('mousemove', this.onMouseMove);
}

initCanvas() {
this.resizeCanvas();
this.drawParticles();
}

onMouseMove(event) {
const { clientX, clientY } = event;
const rect = this.canvas.getBoundingClientRect();
const { w, h } = this.canvasSize;
const x = clientX - rect.left - (w / 2);
const y = clientY - rect.top - (h / 2);
const inside = x < (w / 2) && x > -(w / 2) && y < (h / 2) && y > -(h / 2);
if (inside) {
  this.mouse.x = x;
  this.mouse.y = y;
}
}

resizeCanvas() {
this.circles.length = 0;
this.canvasSize.w = this.canvasContainer.offsetWidth;
this.canvasSize.h = this.canvasContainer.offsetHeight;
this.canvas.width = this.canvasSize.w * this.dpr;
this.canvas.height = this.canvasSize.h * this.dpr;
this.canvas.style.width = this.canvasSize.w + 'px';
this.canvas.style.height = this.canvasSize.h + 'px';
this.context.scale(this.dpr, this.dpr);
}

circleParams() {
const x = Math.floor(Math.random() * this.canvasSize.w);
const y = Math.floor(Math.random() * this.canvasSize.h);
const translateX = 0;
const translateY = 0;
const size = Math.floor(Math.random() * 2) + 1;
const alpha = 0;
const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));
const dx = (Math.random() - 0.5) * 0.2;
const dy = (Math.random() - 0.5) * 0.2;
const magnetism = 0.1 + Math.random() * 4;
return { x, y, translateX, translateY, size, alpha, targetAlpha, dx, dy, magnetism };
}

drawCircle(circle, update = false) {
const { x, y, translateX, translateY, size, alpha } = circle;
this.context.translate(translateX, translateY);
this.context.beginPath();
this.context.arc(x, y, size, 0, 2 * Math.PI);
this.context.fillStyle = `rgba(255, 255, 255, ${alpha})`;
this.context.fill();
this.context.setTransform(this.dpr, 0, 0, this.dpr, 0, 0);
if (!update) {
  this.circles.push(circle);
}
}

clearContext() {
this.context.clearRect(0, 0, this.canvasSize.w, this.canvasSize.h);
}

drawParticles() {
this.clearContext();
const particleCount = this.settings.quantity;
for (let i = 0; i < particleCount; i++) {
  const circle = this.circleParams();
  this.drawCircle(circle);
}
}

// This function remaps a value from one range to another range
remapValue(value, start1, end1, start2, end2) {
const remapped = (value - start1) * (end2 - start2) / (end1 - start1) + start2;
return remapped > 0 ? remapped : 0;
}

animate() {
this.clearContext();
this.circles.forEach((circle, i) => {
  // Handle the alpha value
  const edge = [
    circle.x + circle.translateX - circle.size, // distance from left edge
    this.canvasSize.w - circle.x - circle.translateX - circle.size, // distance from right edge
    circle.y + circle.translateY - circle.size, // distance from top edge
    this.canvasSize.h - circle.y - circle.translateY - circle.size, // distance from bottom edge
  ];
  const closestEdge = edge.reduce((a, b) => Math.min(a, b));
  const remapClosestEdge = this.remapValue(closestEdge, 0, 20, 0, 1).toFixed(2);
  if (remapClosestEdge > 1) {
    circle.alpha += 0.02;
    if (circle.alpha > circle.targetAlpha) circle.alpha = circle.targetAlpha;
  } else {
    circle.alpha = circle.targetAlpha * remapClosestEdge;
  }
  circle.x += circle.dx;
  circle.y += circle.dy;
  circle.translateX += ((this.mouse.x / (this.settings.staticity / circle.magnetism)) - circle.translateX) / this.settings.ease;
  circle.translateY += ((this.mouse.y / (this.settings.staticity / circle.magnetism)) - circle.translateY) / this.settings.ease;
  // circle gets out of the canvas
  if (circle.x < -circle.size || circle.x > this.canvasSize.w + circle.size || circle.y < -circle.size || circle.y > this.canvasSize.h + circle.size) {
    // remove the circle from the array
    this.circles.splice(i, 1);
    // create a new circle
    const circle = this.circleParams();
    this.drawCircle(circle);
    // update the circle position
  } else {
    this.drawCircle({ ...circle, x: circle.x, y: circle.y, translateX: circle.translateX, translateY: circle.translateY, alpha: circle.alpha }, true);
  }
});
window.requestAnimationFrame(this.animate);
}
}

// Init ParticleAnimation
const canvasElements = document.querySelectorAll('[data-particle-animation]');
canvasElements.forEach(canvas => {
const options = {
quantity: canvas.dataset.particleQuantity,
staticity: canvas.dataset.particleStaticity,
ease: canvas.dataset.particleEase,
};
new ParticleAnimation(canvas, options);
});


  window.addEventListener('load',()=>{
    const ManageCourses  =  document.querySelector('.Manage-Courses ')
    ManageCourses.classList.add('active')
  })

</script>
</html>